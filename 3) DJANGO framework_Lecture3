#please view my Youtube channel https://www.youtube.com/watch?v=o82-NoPSe6U
#from lecture CS50 HARVARD https://www.youtube.com/watch?v=w8q0C-C1js4&list=PLhQjrBD2T380xvFSUmToMMzERZ3qB5Ueu&index=5


#URLs.PY - PROJECT URLs CONFIGURATION:
URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django import urls
from django.contrib import admin
from django.urls import path
from django.urls.conf import include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('hello/', include("hello.urls")),
    path('tasks/', include("tasks.urls")),
    path('newyear/', include("newyear.urls"))
]



#APP-1: "HELLO" --> THIS APP HAS the ability to be able to generate programmatically custom HTML and CSS, saying hello to a person's name based on what name is provided inside of URL
#VIEWS.PY

from django.http import HttpResponse
from django.shortcuts import render

# Create your views here.
def index(request):
    
    #Option1: render just a string;
    #return HttpResponse("Hello!!!!! i am Ignacio from Argentina, this is my django web app runing in server, welcome!")
    
    #Option2: render an entire Html file template;
    return render(request, "hello/index.html")

def stranger(request):
    return HttpResponse("Hello stranger visitor!")

def client(request):
    return HttpResponse("Hello client!")

def greet(request, name):
    #option1: render just a string;
    #return HttpResponse(f"Hello! {name.capitalize()}")

    #Option2: render an entire page with some additional content for example a dictionary;
    return render(request, "hello/greet.html", {
        "name": name.capitalize()
    })
    
    
#URLs.PY
from django.urls import path

from . import views

urlpatterns = [
    path("", views.index, name="index"),
    path("<str:name>", views.greet, name="greet"),
    path("stranger", views.stranger, name="stranger"),
    path("client", views.client, name="client")
    
]








#APP-2: "NEWYEAR" --> This app has the ability to check the current date and conditionally display something if the date is one thing versus another, in this case checks if it is or not "New Year"
#VIEWS.PY

import datetime

from django.shortcuts import render

# Create your views here.
def index(request):
    now = datetime.datetime.now()
    return render(request, "newyear/index.html", {
        "newyear": now.month == 1 and now.day == 1
    })

#URLs.PY
from django.urls.resolvers import URLPattern

from . import views

urlpatterns = [
    path("", views.index, name="index")
]








#APP-3: "TASKS LIST" --> This app has the ability to store data on a session basis, to be able to store information about a user's to do list, for example, such that on subsequent visits, they can see their list of things they need to do with a different list for each of these possible users (here Django gets very powerful when it comes storing data inside of databases);
#VIEWS.PY

from django import forms
from django.http.response import HttpResponseRedirect
from django.urls.base import reverse

import tasks
from django.shortcuts import render

#Option1 defining a list of tasks; tasks = ["task1", "task2", "task3"]


class NewTaskForm(forms.Form):
    task = forms.CharField(label="New Task")
    #client-side validation;
    priority = forms.IntegerField(label="Priority", min_value=1, max_value=5)


# Create your views here.
def index(request):
    if "tasks" not in request.session:
        request.session["tasks"] = []

    return render(request, "tasks/index.html", {
        "tasks": request.session["tasks"]
    })

def add(request):
    # server-side validation algorithm;
    if request.method == "POST":
            form = NewTaskForm(request.POST)
            if form.is_valid():      
                task = form.cleaned_data["task"]
                #private-session in browser;
                request.session["tasks"] += [task]
                #redirect;
                return HttpResponseRedirect(reverse("tasks:index"))

            else:
                return render(request, "task/add.html", {
                    "form":form
                })

    return render(request, "tasks/add.html", {
        "form": NewTaskForm
    })
    
    
#URLs.PY
    from django.urls import path

from . import views

app_name = "tasks"
urlpatterns = [
    path("", views.index, name="index"),
    path("add", views.add, name="add")
]
